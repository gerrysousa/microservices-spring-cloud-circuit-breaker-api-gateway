Curso de Microservices com Spring Cloud: Circuit Breaker, Hystrix e API Gateway

Faça esse curso de Java API e:
- Use um API Gateway com Spring Zuul
- Implemente a autenticação e autorização com token
- Saiba como tratar erros em um sistema distribuído
- Consiga uma alta disponibilidade com Bulkhead
- Entenda Fallback e Circuit Breaker

==========================================================================================================================================================================
Aulas
Fallback e Circuit Breaker Ver primeiro vídeo
[ok	] Introdução
[ok	] Projeto inicial do treinamento
[ok	] Ambiente e versões
[ok	] Circuit Breaker e Fallback
[ok	] Implementando a solução
[ok	] Timeout e Circuit Breaker
[ok	] Circuit Breaker vs Fallback Method
[ok	] Consolidando o seu conhecimento
[ok	] O que aprendemos?

Bulkhead com Hystrix
[ok	] Projeto da aula anterior
[ok	] O que é Bulkhead?
[ok	] Processamento paralelo com microsserviços
[ok	] Bulkhead na prática
[ok	] Consolidando o seu conhecimento
[ok	] O que aprendemos?

Lidando com transação e erros
[ok	] Projeto da aula anterior
[ok	] Importação do novo serviço
[ok	] Integração entre serviços
[ok	] O que é a compra?
[ok	] Tratando erros na integração
[ok	] Orquestrador como cliente
[ok	] Consolidando o seu conhecimento
[ok	] O que aprendemos?

API Gateway com Spring Zuul
[ok	] Projeto da aula anterior
[ok	] Introdução ao Zuul
[ok	] Zuul vs Eureka
[ok	] Zuul na prática
[ok	] Integração entre o Zuul e o Eureka Server
[ok	] Consolidando o seu conhecimento
[ok	] O que aprendemos?

Autenticação e autorização
[ok	] Projeto da aula anterior
[ok	] Introdução à autenticação
[ok	] Identificando o usuário logado
[ok	] Servidor de autenticação
[ok	] Spring Security e Spring Cloud Oauth
[ok	] Validando o token
[ok	] Repassando o token
[ok	] Feign interceptor
[ok	] Consolidando o seu conhecimento
[ok	] Projeto do curso
[ok	] O que aprendemos?
[	] Conclusão

==========================================================================================================================================================================
 Projeto inicial do treinamento

O projeto inicial desde treinamento é o projeto implementado no treinamento anterior. Então, caso você tenha feito o treinamento anterior, pode prosseguir com o mesmo projeto.

Caso você não tenha feito o treinamento anterior ou não tenha mais o projeto, você pode baixá-lo aqui.

==========================================================================================================================================================================
<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>
				spring-cloud-starter-netflix-hystrix
			</artifactId>
		</dependency>

==========================================================================================================================================================================
Download JMeter:
https://archive.apache.org/dist/jmeter/binaries/?C=M;O=D

Executar JMeter:
C:\rootFolder\apache-jmeter-5.4.3_src\apache-jmeter-5.4.3\bin\jmeter.bat


Adicionar Thread group:
Test Plan >> Add >> Threads Users >> Thread Group

Add ouvinte:
Thread Group >> Add >> Listener >> View Results Tree

Add request:
Thread Group >> Add >> Sample >> Http Request
Body

Add header:
Http Request >> Add >> Config Element >> Http Header Manager
--header 'Content-Type: application/json' \


Executar sem Parar:
Thread Group >> Loop Count >> marcar checkbox "infinto"

Aumentar Threads :
Thread Group >> Numero de Threads


Add outro listener:
Thread Group >> Add >> Listener >> Agregate Report

==========================================================================================================================================================================
É possivel configurar o timeout do Hystrix.

"HystrixCommandProperties.Setter().withExecutionTimeoutInMilliseconds(5000)"

==========================================================================================================================================================================
- O que aprendemos?

Nesta aula, vimos:

O impacto na aplicação por problemas de lentidão ao consultar outros microsserviço
Como funciona o Circuit Breaker
Os problemas gerados na integração da Loja com o Fornecedor
A implementação do Circuit Breaker com Hystrix, limitando o tempo de processamento para 1 segundo
Como funciona o Fallback Method
O uso do Fallback para tratar a interrupção da Thread efetuada pelo Circuit Breaker


==========================================================================================================================================================================
- O que aprendemos?

Nesta aula, vimos:

Que o Hystrix executa uma gerência de um pool de threads
A combinação de um volume alto de requisições para um único serviço de um microsserviço pode indisponibilizar as outras requisições
Como funciona o Bulkhead Pattern
Como implementar o Bulkhead Pattern com o Hystrix
Como dividir as threads entre os serviços buscaCompa e realizaCompra
A análise das threads gerenciadas pelo Hystrix.

==========================================================================================================================================================================
- O que aprendemos?

Nesta aula, vimos:

A importação e integração com o microsserviço Transportador
Como realizar a compra com os dados do pedido e do voucher do transporte, utilizando os id's fornecidos pelos microsserviços
O entendimento de que, com microsserviços, uma transação do usuário passa por diversos microsserviços e que a gestão dessa transação fica sob a responsabilidade do programador
Como tratar os erros na transação, marcando o que foi processado com o uso de estados

==========================================================================================================================================================================
 Zuul vs Eureka

Para que os nossos microsserviços se comuniquem entre si, eles fazem o uso do Eureka, tanto para se disponibilizarem como para descobrir instâncias de outros microsserviços. Qual a necessidade do Api Gateway, já que os nossos microsserviços se conhecem?

R: Para que os usuários consigam acessar as funcionalidades implementadas em vários microsserviços, sem que esses tenham a inteligência de saber como encontrar os microsserviços

Alternativa correta! Uma aplicação rodando no navegador, ou mesmo em um aplicativo móvel, não deveria ter a inteligência de se comunicar com o Eureka, nosso Service Discovery, para descobrir as instâncias disponíveis. Aliás, faz sentido expor o Eureka na internet? Acho que não.


==========================================================================================================================================================================
- Integração entre o Zuul e o Eureka Server
Fizemos uma integração entre o Zuul e o Eureka Server. O que ganhamos com essa integração?

O Zuul utiliza o Eureka para conhecer as instâncias dos microsserviços e, usando o Ribbon, fazer o balanceamento de carga das requisições dos usuários
O Zuul utiliza o Eureka para conhecer as instâncias dos microsserviços e, usando o Ribbon, fazer o balanceamento de carga das requisições dos usuários

==========================================================================================================================================================================
- O que aprendemos?

Nesta aula, vimos:

Como disponibilizar a nossa aplicação para serem acessadas por um cliente
O uso do Api Gateway, para criar um único ponto de acesso à nossa aplicação
O uso da implementação Zuul como Api Gateway do nosso sistema
A integração do Zuul com o Eureka, para o descobrimento automático das instâncias disponíveis da nossa aplicação
A alteração das requisições para os nossos microsserviços, com o uso do Zuul

==========================================================================================================================================================================
Como os microsserviços identificam o usuário logado?

Extraindo o token da requisição e consultando os dados do usuário no servidor de autenticação

 Quando o usuário faz uma requisição para um serviço que demanda que o usuário esteja logado, no header da requisição, o usuário envia um token, que ele conseguiu previamente através do servidor de autenticação.
==========================================================================================================================================================================
Como o Spring Security e o Spring Cloud OAuth são integrados?

A integração é feita quanto estendemos o WebSecurityConfigurerAdapter e expomos os recursos do Spring Security para serem utilizados pelo Spring Cloud OAuth

Alternativa correta! AuthenticationManager e UserDetailService são os beans expostos do Spring Security e injetados no Adapter do Spring Cloud OAuth2: o AuthorizationServerConfigurerAdapter. Mais especificamente, a integração é feita no método configure deste adapter.
==========================================================================================================================================================================
Bloquear todos os endpoints
  @Override
  public void configure(HttpSecurity http) throws Exception {
    http.authorizeRequests()
        .anyRequest()
        .authenticated();
  }
==========================================================================================================================================================================
- O que aprendemos?

Nesta aula, vimos:

Como funciona a autenticação e autorização com microsserviços
Como criar um servidor de autenticação com Spring Security e Spring Cloud OAuth2
A implementação da integração entre o Spring Security e o Spring Cloud OAuth2
Como gerar e validar tokens no servidor de autenticação
A integração dos microsserviços com o servidor de autenticação
Como repassar o token de autenticação através do Zuul
A implementar um filtro do Feign para repassar o token do usuário nas chamadas para os microsserviços Fornecedor e Transportador

==========================================================================================================================================================================


==========================================================================================================================================================================

