Curso de Microservices com Spring Cloud: Circuit Breaker, Hystrix e API Gateway

Faça esse curso de Java API e:
- Use um API Gateway com Spring Zuul
- Implemente a autenticação e autorização com token
- Saiba como tratar erros em um sistema distribuído
- Consiga uma alta disponibilidade com Bulkhead
- Entenda Fallback e Circuit Breaker

==========================================================================================================================================================================
Aulas
Fallback e Circuit Breaker Ver primeiro vídeo
[ok	] Introdução
[ok	] Projeto inicial do treinamento
[ok	] Ambiente e versões
[ok	] Circuit Breaker e Fallback
[ok	] Implementando a solução
[ok	] Timeout e Circuit Breaker
[ok	] Circuit Breaker vs Fallback Method
[ok	] Consolidando o seu conhecimento
[ok	] O que aprendemos?

Bulkhead com Hystrix
[ok	] Projeto da aula anterior
[ok	] O que é Bulkhead?
[ok	] Processamento paralelo com microsserviços
[ok	] Bulkhead na prática
[ok	] Consolidando o seu conhecimento
[ok	] O que aprendemos?

Lidando com transação e erros
[ok	] Projeto da aula anterior
[ok	] Importação do novo serviço
[ok	] Integração entre serviços
[ok	] O que é a compra?
[	] Tratando erros na integração
[	] Orquestrador como cliente
[	] Consolidando o seu conhecimento
[	] O que aprendemos?

API Gateway com Spring Zuul
[	] Projeto da aula anterior
[	] Introdução ao Zuul
[	] Zuul vs Eureka
[	] Zuul na prática
[	] Integração entre o Zuul e o Eureka Server
[	] Consolidando o seu conhecimento
[	] O que aprendemos?

Autenticação e autorização
[	] Projeto da aula anterior
[	] Introdução à autenticação
[	] Identificando o usuário logado
[	] Servidor de autenticação
[	] Spring Security e Spring Cloud Oauth
[	] Validando o token
[	] Repassando o token
[	] Feign interceptor
[	] Consolidando o seu conhecimento
[	] Projeto do curso
[	] O que aprendemos?
[	] Conclusão

==========================================================================================================================================================================
 Projeto inicial do treinamento

O projeto inicial desde treinamento é o projeto implementado no treinamento anterior. Então, caso você tenha feito o treinamento anterior, pode prosseguir com o mesmo projeto.

Caso você não tenha feito o treinamento anterior ou não tenha mais o projeto, você pode baixá-lo aqui.

==========================================================================================================================================================================
<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>
				spring-cloud-starter-netflix-hystrix
			</artifactId>
		</dependency>

==========================================================================================================================================================================
Download JMeter:
https://archive.apache.org/dist/jmeter/binaries/?C=M;O=D

Executar JMeter:
C:\rootFolder\apache-jmeter-5.4.3_src\apache-jmeter-5.4.3\bin\jmeter.bat


Adicionar Thread group:
Test Plan >> Add >> Threads Users >> Thread Group

Add ouvinte:
Thread Group >> Add >> Listener >> View Results Tree

Add request:
Thread Group >> Add >> Sample >> Http Request
Body

Add header:
Http Request >> Add >> Config Element >> Http Header Manager
--header 'Content-Type: application/json' \


Executar sem Parar:
Thread Group >> Loop Count >> marcar checkbox "infinto"

Aumentar Threads :
Thread Group >> Numero de Threads


Add outro listener:
Thread Group >> Add >> Listener >> Agregate Report

==========================================================================================================================================================================
É possivel configurar o timeout do Hystrix.

"HystrixCommandProperties.Setter().withExecutionTimeoutInMilliseconds(5000)"

==========================================================================================================================================================================
- O que aprendemos?

Nesta aula, vimos:

O impacto na aplicação por problemas de lentidão ao consultar outros microsserviço
Como funciona o Circuit Breaker
Os problemas gerados na integração da Loja com o Fornecedor
A implementação do Circuit Breaker com Hystrix, limitando o tempo de processamento para 1 segundo
Como funciona o Fallback Method
O uso do Fallback para tratar a interrupção da Thread efetuada pelo Circuit Breaker


==========================================================================================================================================================================
- O que aprendemos?

Nesta aula, vimos:

Que o Hystrix executa uma gerência de um pool de threads
A combinação de um volume alto de requisições para um único serviço de um microsserviço pode indisponibilizar as outras requisições
Como funciona o Bulkhead Pattern
Como implementar o Bulkhead Pattern com o Hystrix
Como dividir as threads entre os serviços buscaCompa e realizaCompra
A análise das threads gerenciadas pelo Hystrix.

==========================================================================================================================================================================


==========================================================================================================================================================================


==========================================================================================================================================================================


==========================================================================================================================================================================


==========================================================================================================================================================================


==========================================================================================================================================================================


==========================================================================================================================================================================


==========================================================================================================================================================================


==========================================================================================================================================================================


==========================================================================================================================================================================

